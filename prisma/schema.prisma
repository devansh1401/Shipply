datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  phone         String?   @unique
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  bookings      Booking[]
  driver        Driver?
}

model Driver {
  id             String    @id @default(uuid())
  user           User      @relation(fields: [userId], references: [id])
  userId         String    @unique
  name           String
  email          String    @unique
  phone          String    @unique
  status         DriverStatus
  vehicle        Vehicle?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  bookings       Booking[]
  locationUpdates DriverLocation[]
}

model DriverLocation {
  id        String   @id @default(uuid())
  driver    Driver   @relation(fields: [driverId], references: [id])
  driverId  String
  lat       Float
  lng       Float
  timestamp DateTime @default(now())

  @@index([driverId, timestamp])
}

model Vehicle {
  id           String     @id @default(uuid())
  driver       Driver     @relation(fields: [driverId], references: [id])
  driverId     String     @unique
  type         VehicleType
  plateNumber  String     @unique
  capacity     Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Booking {
  id             String        @id @default(uuid())
  user           User          @relation(fields: [userId], references: [id])
  userId         String
  driver         Driver?       @relation(fields: [driverId], references: [id])
  driverId       String?
  pickupLat      Float
  pickupLng      Float
  dropoffLat     Float
  dropoffLng     Float
  vehicleType    VehicleType
  status         BookingStatus
  priceEstimate  Float
  distance       Float
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  payment        Payment?
  trackingUpdates TrackingUpdate[]

  @@index([userId, createdAt])
  @@index([driverId, status])
}

model TrackingUpdate {
  id        String   @id @default(uuid())
  booking   Booking  @relation(fields: [bookingId], references: [id])
  bookingId String
  lat       Float
  lng       Float
  timestamp DateTime @default(now())

  @@index([bookingId, timestamp])
}

model Payment {
  id             String       @id @default(uuid())
  booking        Booking      @relation(fields: [bookingId], references: [id])
  bookingId      String       @unique
  amount         Float
  status         PaymentStatus
  paymentMethod  PaymentMethod
  transactionId  String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([status, createdAt])
}

enum DriverStatus {
  AVAILABLE
  BUSY
  OFFLINE
}

enum VehicleType {
  BIKE
  CAR
  TRUCK
}

enum BookingStatus {
  PENDING
  ACCEPTED
  EN_ROUTE_TO_PICKUP
  ARRIVED_AT_PICKUP
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum PaymentMethod {
  CARD
  CASH
  WALLET
}